using UnityEngine;
using UnityEngine.UI;
using System;
using System.Collections;
using System.Runtime.InteropServices;

public class Main : MonoBehaviour {
struct PVAVector3D {
	public float x, y, z;
};

struct PVATDetectData {
	public uint time;
	public PVAVector3D pos;
};

struct PVATDetectInfo {
	public int flags;
	public int hit_num;
	public IntPtr hit_data;
};

#if Enable_UseDLL
	[DllImport("PVAT")]
	private static extern void PVAT_init();

	[DllImport("PVAT")]
	private static extern void PVAT_term();

	[DllImport("PVAT")]
	private static extern int PVAT_getCamraStatus();

	[DllImport("PVAT")]
	private static extern int PVAT_config(IntPtr hWnd);

	[DllImport("PVAT")]
	private static extern int PVAT_getDetect(ref PVATDetectInfo detect);

	[DllImport("PVAT")]
	private static extern int PVAT_getBatterSide(ref int side);

	[DllImport("PVAT", CharSet = CharSet.Ansi)]
	private static extern int PVAT_getSysInt(string name);

	[DllImport("PVAT", CharSet = CharSet.Ansi)]
	private static extern int PVAT_setSysInt(string name,int value);
#endif

	// Use this for initialization
	void Start () {
		if( m_bPVAT == false )
		{
#if Enable_UseDLL
			PVAT_init();
#endif
			//m_isRunning = true;
			m_bPVAT = true;
		}
	}
	void OnDestroy(){
		if( m_bPVAT != false )
		{
#if Enable_UseDLL
			PVAT_term();
#endif
			m_bPVAT = false;
		}
	}

	// Update is called once per frame
	void Update () {
		if( m_bPVAT == false )
			return;

		int ret;
#if Enable_UseDLL
		ret = PVAT_getCamraStatus();
#else
		ret = PVATResult_OK;
#endif
		if( m_status != ret ){
			string text;
			switch( m_status ){
			case PVATResult_OK:
				text = "OK"; break;
			case PVATResult_Uninitialize:
				text = "Uninitialize"; break;
			case PVATResult_NotConnect:
				text = "NotConnect"; break;
			case PVATResult_DongleNotFound:
				text = "DongleNotFound"; break;
			case PVATResult_NoFPS:
				text = "NoFPS"; break;
			case PVATResult_NoData:
				text = "NoData"; break;
			default:
				text = "Unknown"; break;
			}
			Debug.Log("getCamraStatus = " + text);

			m_status = ret;
		}
		if( m_status != PVATResult_OK )
			return;

#if Enable_UseDLL
		float changeUI = 1;
		m_dUpdateTime += Time.deltaTime;
		if( m_dUpdateTime > changeUI )
		{
			m_dUpdateTime = 0.0f;
			int nFPS = PVAT_getSysInt("FPS");
			if( m_nFPS != nFPS ){
				m_nFPS = nFPS;
				prefabFPS.text = "FPS: " + m_nFPS;
			}
			int value;
			value = PVAT_getSysInt("Pnt3D");
			prefabLeft.text = "Pnt3D: " + value;
		}
#endif

		if( m_bSwing == true ){
			m_dTime += Time.deltaTime;
			int tex_size = prefabTextures.Length;
			float changeFrameSecond;
			if( m_frameNum == tex_size-1 )
			{
				changeFrameSecond = 1; /*last frame*/
			}
			else
			{
				changeFrameSecond = 0.1f;
			}
			if( m_dTime > changeFrameSecond )
			{
				m_dTime = 0.0f;
				m_frameNum++;
				if( m_frameNum >= tex_size )
				{
					m_frameNum = 0;
					m_bSwing = false;
				}
				Renderer render = m_Batter.GetComponent<Renderer>();
				render.material.SetTexture("_MainTex", prefabTextures[m_frameNum]);
			}
		}
		else{
			int side = 0;
#if Enable_UseDLL
			ret = PVAT_getBatterSide( ref side );
#else
			ret = PVATResult_OK;
			side = m_side2;
#endif
			if( ret == PVATResult_OK ){
				if( side != m_side ){
					m_side = side;
					if( m_side != PVASide_None ){
						if( m_Batter == null )
							m_Batter = Instantiate(prefabBatter);
						if( m_Batter != null ){
							float x_pos = -0.462816f;
							float x_size = 0.1197654f;
							if( m_side == PVASide_Left ){
								x_pos = -x_pos;
								x_size = -x_size;
							}
							m_Batter.transform.localPosition = new Vector3(x_pos, 1.0646f, -1.5915f);
							m_Batter.transform.localRotation = Quaternion.Euler(-90.0f, 0, 0);
							m_Batter.transform.localScale = new Vector3(x_size, 1, 0.21292f);

							Renderer render = m_Batter.GetComponent<Renderer>();
							render.material.SetTexture("_MainTex", prefabTextures[0]);

							m_Batter.SetActive(true);
						}
					}
					else{
						if( m_Batter != null )
							m_Batter.SetActive(false);
					}

					/*string text;
					text = "None";
					switch( m_side ){
					case PVASide_Left:
						text = "Left"; break;
					case PVASide_Right:
						text = "Right"; break;
					}
					Debug.Log("Batter:" + text);*/
				}
			}

#if Enable_UseDLL
			ret = PVAT_getDetect( ref m_detect );
			if( ret == PVATResult_OK ){
				//Debug.Log("Detected!");

				IntPtr pData;
				if( (m_detect.flags & PVATFlg_Hit) != 0 ){
					pData = m_detect.hit_data;

					PVATDetectData first = (PVATDetectData)Marshal.PtrToStructure(pData, typeof(PVATDetectData));
					pData = new IntPtr(pData.ToInt32() + Marshal.SizeOf(typeof(PVATDetectData)));
					PVATDetectData last = (PVATDetectData)Marshal.PtrToStructure(pData, typeof(PVATDetectData));

					startHit( first, last );
				}
			}
#else
			if ( Input.GetMouseButtonDown(0) ){
				//Debug.Log("MouseButtonDown");

				PVATDetectData first;
				PVATDetectData last;

				first.time = 76596;
				//first.pos.x = 0.172401f;
				first.pos.x = 0;
				first.pos.y = 1.074742f;
				first.pos.z = -0.673204f;
				last.time = 76614;
				//last.pos.x = 0.319476f;
				last.pos.x = UnityEngine.Random.Range(-0.32f, 0.32f);
				last.pos.y = 1.312962f;
				last.pos.z = -1.029139f;
				startHit( first, last );
			}
#endif
		}
		if( m_bUpdateDistance == true ){
			string text = "";
			if( m_distance > 0 ){
				text = "Distance: ";
				//text += m_distance;
				text += m_distance.ToString("f2");
				text += " m";
			}
			prefabDistance.text = text;
			m_bUpdateDistance = false;
		}
	}
	void startHit(PVATDetectData first,PVATDetectData last)
	{
		m_pos0 = first.pos;
		m_pos1 = last.pos;

		uint send_time = last.time - first.time;
		float t = (float)1000 / (float)send_time;

		m_dir.x = m_pos1.x - m_pos0.x;
		m_dir.y = m_pos1.y - m_pos0.y;
		m_dir.z = -(m_pos1.z - m_pos0.z);
		float speed = m_dir.magnitude * t;

		//int ispeed = (int)(speed * MPS2KPH + 0.5f);
		//prefabSpeed.text = "Speed: " + ispeed + " Km/H";

		speed *= MPS2KPH;
		prefabSpeed.text = "Speed: " + speed.ToString("f2") + " Km/H";
		/*if( m_Ball != null ){
			Destroy(m_Ball, 0);
			m_Ball = null;
		}*/
		m_Ball = Instantiate(prefabBall);
		if( m_Ball != null ){
			m_dir.Normalize();

			m_Ball.transform.localPosition = new Vector3(m_pos0.x, m_pos0.y, -m_pos0.z);

			Rigidbody rb = m_Ball.GetComponent<Rigidbody>();
			rb.velocity = m_dir * speed;

			//TrailRenderer tr = m_Ball.GetComponent<TrailRenderer>();
			//tr.
		}
		if( m_Batter != null ){
			if( m_bSwing == false ){
				m_bSwing = true;
				m_frameNum = 1;
				m_dTime = 0;
				Renderer render = m_Batter.GetComponent<Renderer>();
				render.material.SetTexture("_MainTex", prefabTextures[m_frameNum]);
			}
		}
		m_bUpdateDistance = true;
		m_distance = 0;
	}
	void OnGUI()
	{
		Event e = Event.current;
		if( e.isKey ){
			//Debug.Log("Detected character: " + e.character);
			if( e.character == 'c' || e.character == 'C' ){
#if Enable_UseDLL
				PVAT_config( IntPtr.Zero );
#else
				//Debug.Log("config");
#endif
			}
#if !Enable_UseDLL
			if( e.character == 'l' || e.character == 'L' ){
				m_side2++;
				if( m_side2 > PVASide_Right )
					m_side2 = PVASide_None;
			}
#endif
		}
	}
	public void HitGround( GameObject obj ){
		Vector3 pos = obj.transform.localPosition;

		Vector3 org = new Vector3(0, 0, 0);
		m_bUpdateDistance = true;
		m_distance = Vector3.Distance( org, pos );

		//Debug.Log("HitGround distance=" + m_distance);
	}

	public GameObject prefabBall;
	public GameObject prefabBatter;
	public Texture[] prefabTextures;
	public Text prefabFPS;
	public Text prefabLeft;
	public Text prefabRight;
	public Text prefabSpeed;
	public Text prefabDistance;

	private const int PVATResult_OK             = 0;
	private const int PVATResult_Uninitialize   = -1;
	private const int PVATResult_NotConnect     = -2;
	private const int PVATResult_DongleNotFound = -5;
	private const int PVATResult_NoFPS          = -6;
	private const int PVATResult_NoData         = -7;
	private const int PVATResult_Unknown        = -100;
	private const int PVATFlg_Hit               = 0x02;

	private const int PVASide_None  = 0;
	private const int PVASide_Left  = 1;
	private const int PVASide_Right = 2;

	private const float KPH2MPS = (1000.0f / 3600.0f);
	private const float MPS2KPH = (3600.0f / 1000.0f);

#if Enable_UseDLL
	private PVATDetectInfo m_detect = new PVATDetectInfo();
#endif
	private GameObject m_Ball = null;
	private GameObject m_Batter = null;
	private int m_side = -1;
#if !Enable_UseDLL
	private int m_side2 = PVASide_Left;
#endif

	private PVAVector3D m_pos0, m_pos1;
	private Vector3 m_dir = new Vector3();

#if Enable_UseDLL
	private int m_nFPS = -1;
#endif
	private bool m_bPVAT = false;
	private bool m_bSwing = false;
	private int m_status = PVATResult_Uninitialize;
	private float m_dTime = 0;
#if Enable_UseDLL
	private float m_dUpdateTime = 0;
#endif
	private int m_frameNum = 0;

	private bool m_bUpdateDistance = false;
	private float m_distance = 0;
}
