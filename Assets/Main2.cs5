using UnityEngine;
using UnityEngine.UI;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using TMPro;

public class HitRecord {
	public GameObject ball;
	public int nNo;
	public float speed;
	public float distance;
	public float rotX;
	public float rotY;
};

public class HitBall {
	public HitBall(GameObject obj_){
		obj = obj_;

		posArray = new List<Vector3>();
		posArray.Add( obj.transform.localPosition );
	}
	public GameObject obj;
	public List<Vector3> posArray;
	public float dTime = 0;
	public bool ground = false;
};

public class HitInfo {
	public GameObject objInfo;
	public GameObject objDistText;
	public GameObject ball;
	public bool ground = false;
	public float distance = 0;
	public float dTime = 0;
};

public class Main2 : MonoBehaviour {
struct PVAVector3D {
	public float x, y, z;
};

struct PVATDetectData {
	public uint time;
	public PVAVector3D pos;
};

struct PVATDetectInfo {
	public int flags;
	public int hit_num;
	public IntPtr hit_data;
};

	[DllImport("PVAT")]
	private static extern void PVAT_init();

	[DllImport("PVAT")]
	private static extern void PVAT_term();

	[DllImport("PVAT")]
	private static extern int PVAT_getCamraStatus();

	[DllImport("PVAT")]
	private static extern int PVAT_config(IntPtr hWnd);

	[DllImport("PVAT")]
	private static extern void PVAT_startBall();

	[DllImport("PVAT")]
	private static extern void PVAT_endBall();

	[DllImport("PVAT")]
	private static extern int PVAT_getDetect(ref PVATDetectInfo detect);

	[DllImport("PVAT")]
	private static extern int PVAT_saveBin();

	[DllImport("PVAT", CharSet = CharSet.Ansi)]
	private static extern int PVAT_getSysInt(string name);

	[DllImport("PVAT", CharSet = CharSet.Ansi)]
	private static extern int PVAT_setSysInt(string name,int value);

	// Use this for initialization
	void Start(){
		if( m_bPVAT == false )
		{
			PVAT_init();
			//m_isRunning = true;
			m_bPVAT = true;
		}
		//if( Display.displays.Length > 1 )
		//	Display.displays[1].Activate();
/*
		// Display.displays[0] は主要デフォルトディスプレイで、常に ON。
		// 追加ディスプレイが可能かを確認し、それぞれをアクティベートします。
		if( Display.displays.Length > 1 )
			Display.displays[1].Activate();
		Display.displays[0].Activate();
		//if( Display.displays.Length > 2 )
		//	Display.displays[2].Activate();
*/
		m_objMainCanvas = GameObject.FindWithTag("MainCanvas");
		m_objInfo1 = m_objMainCanvas.transform.Find("Info1").gameObject;
		m_objInfo2 = m_objMainCanvas.transform.Find("Info2").gameObject;

		//m_objKioskCanvas = GameObject.FindWithTag("KioskCanvas");

		//m_objSignal = Instantiate(prefabSignal);
		//m_objSignal.transform.SetParent(m_objInfo2.transform, false);

		m_objGage = Instantiate(prefabGage);
		m_objGage.transform.SetParent(m_objMainCanvas.transform, false);
		m_objGage.SetActive(false);

		m_objProgress = Instantiate(prefabProgress);
		m_objProgress.transform.SetParent(m_objMainCanvas.transform, false);
		m_objProgress.SetActive(false);

		initHitRecord();
		//m_objPhase = addSysInfo("Phase");
		//m_objCamSts = addSysInfo("Camera");
		//m_objFPS = addSysInfo("FPS");
		//m_objTrigger = addSysInfo("Trigger");
		//m_objRecIndex = addSysInfo("RecIndex");
		//m_objRecIndex = addSysInfo("PVAT.bin");

		m_objCamera = GetComponent<Camera>();
		m_smoothFollow = GetComponent<SmoothFollow>();

		GameObject objTopView = m_objMainCanvas.transform.Find("TopView").gameObject;
		m_topView = objTopView.GetComponent<TrailView>();
		//m_topView.drawPoint = true;
		//m_topView.drawGrid();

		GameObject objSideView = m_objMainCanvas.transform.Find("SideView").gameObject;
		m_sideView = objSideView.GetComponent<TrailView>();

		updateTrigger();

		setGamePhase( GamePhase_Wait );
		setSensorPhase( SensorPhase_Busy );
		setSignal(0);
		m_bStartReq = false;
	}
	void OnDestroy(){
		endBall();
		if( m_bPVAT != false )
		{
			PVAT_term();
			m_bPVAT = false;
		}
	}

	// Update is called once per frame
	void Update () {
		if( m_bPVAT == false )
			return;

		int ret;
		ret = PVAT_getCamraStatus();
		if( m_status != ret ){
			string text;
			switch( ret ){
			case PVATResult_OK:
				text = "ok"; break;
			case PVATResult_Uninitialize:
				text = "uninitialize"; break;
			case PVATResult_NotConnect:
				text = "noConnect"; break;
			case PVATResult_DongleNotFound:
				text = "noDongle"; break;
			case PVATResult_NoFPS:
				text = "noFPS"; break;
			case PVATResult_NoData:
				text = "noData"; break;
			default:
				text = "unknown"; break;
			}
			//setSysInfo(m_objCamSts, text);

			m_status = ret;
		}
		if( m_status != PVATResult_OK )
			return;

		int nFPS = PVAT_getSysInt("FPS");
		if( m_nFPS != nFPS ){
			m_nFPS = nFPS;
			//setSysInfo(m_objFPS, nFPS.ToString());
		}

		switch( m_nSensorPhase ){
		case SensorPhase_Busy:{
			int busy;
			busy = PVAT_getSysInt("Busy");
			if( busy == 0 ){
				showProgress(false);
				if( m_bTrigger ){
					setSensorPhase( SensorPhase_Ready );
				}
				else{
					setSensorPhase( SensorPhase_Start );
				}
			}
			else{
				if( m_bShowProgress ){
					int progress = PVAT_getSysInt("SaveProgress");
					setProgress( progress );
				}
			}
			break;}
		case SensorPhase_Ready:
			if( m_bStartReq ){
				m_bStartReq = false;
				startBall();
				setSensorPhase( SensorPhase_Start );
			}
			break;
		case SensorPhase_Start:
			ret = PVAT_getDetect( ref m_detect );
			if( ret == PVATResult_OK ){
				if( m_bTrigger ){
					endBall();
					setSensorPhase(SensorPhase_Busy);
					//setSignal(0);
				}

				IntPtr pData;
				if( (m_detect.flags & PVATFlg_Hit) != 0 ){
					pData = m_detect.hit_data;

					PVATDetectData first = (PVATDetectData)Marshal.PtrToStructure(pData, typeof(PVATDetectData));
					//pData = new IntPtr(pData.ToInt32() + Marshal.SizeOf(typeof(PVATDetectData)));
					pData = new IntPtr(pData.ToInt64() + Marshal.SizeOf(typeof(PVATDetectData)));
					//pData += Marshal.SizeOf(typeof(PVATDetectData));
					//pData = IntPtr.Add( pData, Marshal.SizeOf(typeof(PVATDetectData)) );
					PVATDetectData last = (PVATDetectData)Marshal.PtrToStructure(pData, typeof(PVATDetectData));

					startHit( first, last );
					setGamePhase( GamePhase_Hit );
					setSignal(0);
				}
			}
			else{
				if( Input.GetMouseButtonDown(0) ){
					if( m_bTrigger ){
						endBall();
						setSensorPhase(SensorPhase_Busy);
						//setSignal(0);
					}

					//Debug.Log("mousePosition: " + Input.mousePosition);
					resetView();
					startHit2();
					setGamePhase( GamePhase_Hit );
					setSignal(0);
				}
			}
			break;
		}

		switch( m_nGamePhase ){
		case GamePhase_Wait:
			m_dTime -= Time.deltaTime;
			if( m_dTime <= 0 )
				setGamePhase( GamePhase_Busy );
			break;
		case GamePhase_Busy:
			if( m_bTrigger ){
				if( m_nSensorPhase == SensorPhase_Ready ){
					m_bStartReq = true;
					//setGamePhase( GamePhase_Start );
					//showProgress(false);
				}
			}
			if( m_nSensorPhase == SensorPhase_Start ){
				setGamePhase( GamePhase_Start );
				setSignal(1);
				//showProgress(false);
			}
			break;
		case GamePhase_Start:
			if( m_bTrigger ){
				m_dTime -= Time.deltaTime;

				float ratio = m_dTime / ReadyTime;
				UnityEngine.UI.Image image = m_objGage.GetComponent<UnityEngine.UI.Image>();
				if( ratio < 0 )
					ratio = 0;

				image.fillAmount = ratio;
				//prefabSpeed.text = "ratio: " + ratio.ToString("f2");

				if( ratio == 0 ){
					endBall();
					setSensorPhase(SensorPhase_Busy);

					setGamePhase( GamePhase_Busy );
					setSignal(0);
				}
			}
			break;
		}

		int num_hit = m_HitArray.Count;
		if( num_hit != 0 ){
			m_topView.clearNewTrail();
			m_sideView.clearNewTrail();

			int i = 0;
			while( i < num_hit ){
				bool remove = false;
				HitBall hit = m_HitArray[i];
				if( hit.ground ){
					hit.dTime -= Time.deltaTime;
					if( hit.dTime <= 0 ){
						Destroy( hit.obj, 1.0f );
						remove = true;

						if( m_lastHit == hit ){
							if( m_bFollow )
								m_smoothFollow.setTarget(null);
							m_lastHit = null;

							//resetView();
							//setGamePhase( GamePhase_Busy );
						}
					}
				}
				else{
					Vector3 pos = hit.obj.transform.localPosition;
					hit.posArray.Add( pos );
				}
				if( remove ){
					m_topView.addOldTrail( hit.posArray );
					m_sideView.addOldTrail( hit.posArray );

					m_HitArray.RemoveAt(i);
					num_hit--;
				}
				else{
					m_topView.addNewTrail( hit.posArray );
					m_sideView.addNewTrail( hit.posArray );

					i++;
				}
			}
			if( num_hit == 0 ){
				resetView();
				setGamePhase( GamePhase_Busy );
			}
		}

		int num_info = m_InfoArray.Count;
		for(int i = 0; i < num_info; i++){
			HitInfo info = m_InfoArray[i];
			updateHitInfo( info );

			info.dTime += Time.deltaTime;
			GameObject objInfo = info.objInfo;

			float ratio = info.dTime / MainSpeedLife;
			float value = 1.0f + (MainSpeedScale - 1.0f) * ratio;
			objInfo.transform.localScale = new Vector3(value, value, value);

			Vector3 pos = objInfo.transform.localPosition;
			pos.y += 0.1f;
			objInfo.transform.localPosition = pos;
		}

		if( m_bFollow ){
			if( m_smoothFollow.getTarget() ){
				m_smoothFollow.update();
			}
		}
	}
	/*void LateUpdate()
	{
		if( m_smoothFollow.getTarget() ){
			m_smoothFollow.update();
		}
	}*/
	void startBall()
	{
		if( m_bStart == false )
		{
			PVAT_startBall();
			m_bStart = true;
		}
	}
	void endBall()
	{
		if( m_bStart != false )
		{
			PVAT_endBall();
			m_bStart = false;
		}
	}
	void startHit(PVATDetectData first,PVATDetectData last)
	{
		m_pos0 = first.pos;
		m_pos1 = last.pos;

		uint send_time = last.time - first.time;
		float t = (float)1000 / (float)send_time;

		m_dir.x = m_pos1.x - m_pos0.x;
		m_dir.y = m_pos1.y - m_pos0.y;
		m_dir.z = m_pos1.z - m_pos0.z;
		float speed = m_dir.magnitude * t;
		m_dir.Normalize();

		m_dir.z = -m_dir.z;

		HitRecord record = addHitRecord();
		record.speed = speed * MPS2KPH;

		calcBallAngleInfo( m_dir, record );
		setBallSpeedInfo( record.speed );
		setBallAngleInfo( record );
		//setLRAngleInfo( m_dir );
		//clearLRDistInfo();
		clearFlyDistInfo(); // clear 飛距離 on new ball
		updateHitRecord();

		GameObject ball = Instantiate(prefabBallHit);
		BallHit ball_hit = ball.GetComponent<BallHit>();
		//ball_hit.setRecord( record );
		record.ball = ball;

		ball.transform.localPosition = new Vector3(m_pos0.x, m_pos0.y, -m_pos0.z);

		Rigidbody rb = ball.GetComponent<Rigidbody>();
		rb.velocity = m_dir * speed;

		addHitInfo( ball, record.speed );

		if( m_bFollow ){
			m_smoothFollow.setTarget( ball );
		}
		m_lastHit = addHitBall( ball );
	}
	void startHit2()
	{
		//int ispeed = 120;
		int ispeed = UnityEngine.Random.Range( 8, 13 ) * 10;
		float speed = (float)ispeed * KPH2MPS;

		Ray ray = m_objCamera.ScreenPointToRay( Input.mousePosition );

		HitRecord record = addHitRecord();
		record.speed = speed * MPS2KPH;

		calcBallAngleInfo( ray.direction, record );
		setBallSpeedInfo( record.speed );
		setBallAngleInfo( record );
		//setLRAngleInfo( ray.direction );
		//clearLRDistInfo();
		clearFlyDistInfo();  // clear 飛距離 on new ball
		updateHitRecord();

		GameObject ball = Instantiate(prefabBallHit);
		BallHit ball_hit = ball.GetComponent<BallHit>();
		//ball_hit.setRecord( record );
		record.ball = ball;

		ball.transform.localPosition = ray.origin;

		Rigidbody rb = ball.GetComponent<Rigidbody>();
		rb.velocity = ray.direction * speed;

		addHitInfo( ball, record.speed );

		if( m_bFollow ){
			m_smoothFollow.setTarget( ball );
		}
		m_lastHit = addHitBall( ball );
	}
	void setSensorPhase(int phase)
	{
		m_nSensorPhase = phase;
	}
	void setGamePhase(int phase)
	{
		m_nGamePhase = phase;

		bool bShowGage = false;
		//string text;
		switch( phase ){
		case GamePhase_Wait:
			//text = "Wait";
			m_dTime = WaitTime;
			break;
		case GamePhase_Busy:
			//text = "Busy";
			break;
		case GamePhase_Start:
			//text = "Start";
			m_dTime = ReadyTime;
			bShowGage = m_bTrigger;
			break;
		case GamePhase_Hit:
			//text = "Hit";
			break;
		case GamePhase_HitGround:
			//text = "HitGround";
			m_dTime = HitGroundTime;
			break;
		default:
			//text = "???";
			break;
		}
		if( bShowGage != m_bShowGage ){
			m_objGage.SetActive( bShowGage );
			m_bShowGage = bShowGage;
		}
		//prefabStatus.text = "phase:" + text;
		//setSysInfo(m_objPhase, text);
	}
	void setSignal(int index)
	{/*
		Image img = m_objSignal.GetComponent<Image>();
		img.sprite = prefabSprite[index];
	*/}
	void OnGUI()
	{
		Event e = Event.current;
		if( e.isKey ){
			//Debug.Log("Detected character: " + e.character);
			if( e.character == 'c' || e.character == 'C' ){
				PVAT_config( IntPtr.Zero );
			}
			else if( e.character == 't' || e.character == 'T' ){
				m_bTrigger = m_bTrigger? false: true;
				updateTrigger();
				/* reset Phase */
				setGamePhase( GamePhase_Busy );
				setSensorPhase( SensorPhase_Busy );
				setSignal(0);
				m_bStartReq = false;
			}
			else if( e.character == 's' || e.character == 'S' ){
				PVAT_saveBin();
				/* reset Phase */
				setGamePhase( GamePhase_Busy );
				setSensorPhase( SensorPhase_Busy );
				setSignal(0);
				m_bStartReq = false;

				setProgress(0);
				showProgress(true);
			}
		}
	}
	public void HitGround(GameObject ball){
		Vector3 pos = ball.transform.localPosition;

		Vector3 org = new Vector3(0, 0, 0);
		float distance = Vector3.Distance( org, pos );

		BallHit ball_hit = ball.GetComponent<BallHit>();

		//HitRecord record = ball_hit.getRecord();
		int num = m_RecordArray.Count;
		for(int i = 0; i < num; i++){
			HitRecord record = m_RecordArray[i];
			if( ball == record.ball ){
				record.distance = distance;
				record.ball = null;

				int index = (m_RecordArray.Count-1) - i;
				if( index < NumHitRecord )
					setHitDistance_( distance, m_objHitRecord[index] );
				break;
			}
		}
		setFlyDistInfo( distance );
		//setLRDistInfo( pos.x );

		if( m_nGamePhase != GamePhase_HitGround && ball == m_lastHit.obj ){
			setGamePhase( GamePhase_HitGround );
		}
		//Debug.Log( "Distance: " + distance.ToString("f2") + " m" );
		int num_hit = m_HitArray.Count;
		for(int i = 0; i < num_hit; i++){
			HitBall hit = m_HitArray[i];
			if( hit.obj == ball ){
				hit.ground = true;
				hit.dTime = HitGroundTime;
				break;
			}
		}

		int num_info = m_InfoArray.Count;
		for(int i = 0; i < num_info; i++){
			HitInfo info = m_InfoArray[i];
			if( info.ball == ball ){
				info.ball = null;
				info.ground = true;
				info.distance = distance;
				updateHitInfo( info );

				Destroy( info.objInfo, HitInfoTime );

				m_InfoArray.RemoveAt(i);
				break;
			}
		}

		GameObject ballEffect = Instantiate(prefabBallEffect);
		ballEffect.transform.localPosition = new Vector3(pos.x, 0.05f, pos.z);
		Destroy( ballEffect, 1.0f );
	}

	void initHitRecord(){
		m_objHitRecord = new GameObject[NumHitRecord];

		float y = HitRecordPosY;
		for(int i = 0; i < NumHitRecord; i++){
			GameObject obj = Instantiate(prefabHitRecord);
			obj.transform.localPosition = new Vector3(HitRecordPosX, y, 0);
			obj.transform.SetParent(m_objInfo2.transform, false);

			m_objHitRecord[i] = obj;
			y -= HitRecordHeight;
		}
	}
	void updateHitRecord(){
		int num = m_RecordArray.Count;
		int end = num-1;
		if( num > NumHitRecord )
			num = NumHitRecord;
		for(int i = 0; i < num; i++){
			setHitRecord_(m_RecordArray[end-i], m_objHitRecord[i]);
		}
	}
	HitRecord addHitRecord(){
		HitRecord record = new HitRecord();

		int size = m_RecordArray.Count;
		record.ball = null;
		record.nNo = size + 1;
		record.speed = -1;
		record.distance = -1;

		m_RecordArray.Add( record );
		return record;
	}
	HitBall addHitBall(GameObject obj){
		HitBall hit = new HitBall(obj);
		m_HitArray.Add( hit );
		return hit;
	}
	void setNewHitRecord_(HitRecord record,GameObject obj){
		GameObject objNo = obj.transform.Find("no").gameObject;
		Text txNo = objNo.GetComponent<Text>();
		txNo.text = record.nNo.ToString();

		GameObject objSpeed = obj.transform.Find("speed").gameObject;
		Text txSpeed = objSpeed.GetComponent<Text>();
		GameObject objSpeedUnit = obj.transform.Find("speedUnit").gameObject;
		if( record.speed >= 0 ){
			txSpeed.text = ((int)record.speed).ToString();
			objSpeedUnit.SetActive(true);
		}
		else{
			txSpeed.text = "";
			objSpeedUnit.SetActive(false);
		}

		GameObject objLaunchAngle = obj.transform.Find("launchAngle").gameObject;
		Text txLaunchAngle = objLaunchAngle.GetComponent<Text>();
		txLaunchAngle.text = ((int)record.rotX).ToString();

		GameObject objAngleUnit1 = obj.transform.Find("angleUnit_1").gameObject;
		objAngleUnit1.SetActive(true);

		GameObject objSideAngle = obj.transform.Find("sideAngle").gameObject;
		Text txSideAngle = objSideAngle.GetComponent<Text>();
		txSideAngle.text = ((int)record.rotY).ToString();

		GameObject objAngleUnit2 = obj.transform.Find("angleUnit_2").gameObject;
		objAngleUnit2.SetActive(true);

		GameObject objR = obj.transform.Find("R").gameObject;
		GameObject objL = obj.transform.Find("L").gameObject;
		objL.SetActive(false);
		objR.SetActive(false);
		if( record.rotY > 0 ){
			objR.SetActive(true);
		}
		else if( record.rotY < 0 ){
			objL.SetActive(true);
		}

		setHitDistance_(record.distance, obj);
	}
	void setHitRecord_(HitRecord record,GameObject obj){
		GameObject objNo = obj.transform.Find("no").gameObject;
		Text txNo = objNo.GetComponent<Text>();
		txNo.text = record.nNo.ToString();

		GameObject objSpeed = obj.transform.Find("speed").gameObject;
		Text txSpeed = objSpeed.GetComponent<Text>();
		if( record.speed >= 0 ){
			//txSpeed.text = record.speed.ToString("f2") + " Km/h";
			txSpeed.text = (int)record.speed + " km/h";
		}
		else{
			txSpeed.text = "";
		}
		setHitDistance_(record.distance, obj);
	}
	void setHitDistance_(float distance,GameObject obj){
		GameObject objDist = obj.transform.Find("distance").gameObject;
		Text txDist = objDist.GetComponent<Text>();
		if( distance >= 0 ){
			txDist.text= distance.ToString("f2") + " m";
		}
		else{
			txDist.text = "";
		}
	}
	void addHitInfo(GameObject ball,float speed){
		int ispeed = (int)speed;

		GameObject objInfo;
		objInfo = Instantiate(prefabHitInfo);
		objInfo.transform.SetParent(m_objMainCanvas.transform, false);

		GameObject objSpeed;
		if( ispeed >= 120 )
			objSpeed = Instantiate(prefabSpeedGold);
		else if( ispeed >= 100 )
			objSpeed = Instantiate(prefabSpeedSilver);
		else
			objSpeed = Instantiate(prefabSpeedNormal);
		objSpeed.transform.SetParent(objInfo.transform, false);

		GameObject objText = objSpeed.transform.Find("text").gameObject;
		TextMeshProUGUI tx1 = objText.GetComponent<TextMeshProUGUI>();
		tx1.text = ispeed.ToString();

		int idistance = 0;

		GameObject objDistance;
		objDistance = Instantiate(prefabDistanceNormal);
		objDistance.transform.SetParent(objInfo.transform, false);

		GameObject objDistText = objDistance.transform.Find("text").gameObject;
		TextMeshProUGUI tx2 = objDistText.GetComponent<TextMeshProUGUI>();
		tx2.text = idistance.ToString();

		//CanvasRenderer render = objSpeed.GetComponent<CanvasRenderer>();
		//render.SetAlpha(0.5f);

		HitInfo info = new HitInfo();
		info.objInfo = objInfo;
		info.objDistText = objDistText;
		info.ball = ball;
		m_InfoArray.Add( info );
	}
	void updateHitInfo(HitInfo info){
		TextMeshProUGUI tx = info.objDistText.GetComponent<TextMeshProUGUI>();
		if( !info.ground ){
			GameObject ball = info.ball;
			Vector3 pos = ball.transform.localPosition;
			pos.y = 0;

			Vector3 org = new Vector3(0, 0, 0);
			float distance = Vector3.Distance( org, pos );
			int idistance = (int)distance;

			tx.text = idistance.ToString();
		}
		else{
			tx.text= info.distance.ToString("f1");
		}
	}
	void setNewSpeedInfo(float speed){ setNewInfo(m_objSpeedInfo, speed); }
	void setNewDistInfo(float distance){ setNewInfo(m_objDistanceInfo, distance); }
	void setNewInfo(GameObject obj,float value){
		int ivalue = (int)value;
		GameObject objValue = obj.transform.Find("value").gameObject;
		TextMeshProUGUI tx = objValue.GetComponent<TextMeshProUGUI>();
		tx.text = ivalue.ToString();
	}
	void setFlyDistInfo(float distance){ setDistanceInfo1("FlyDistInfo", distance); }
	void setLRDistInfo(float distance){
		string prefix = null; // added null and else if to avoid R0.0m
		if (distance < 0)
		{
			distance = -distance;
			prefix = "L";
		}
		else if (distance > 0)
		{
			prefix = "R";
		}
		setDistanceInfo2("LRDistValue", prefix, distance);
	}
	//void clearLRDistInfo(){ clearInfo("LRDistValue"); }
	void clearFlyDistInfo(){ clearInfo("FlyDistInfo"); } // clear 飛距離 on new ball
	void setBallSpeedInfo(float speed){ setSpeedInfo("BallSpeedValue", speed); }
	void calcBallAngleInfo(Vector3 dir,HitRecord record){
		float rotY = Mathf.Atan2(dir.x, dir.z) * Mathf.Rad2Deg;
		Vector3 vec = Quaternion.Euler( 0, -rotY, 0 ) * dir;

		float rotX = Mathf.Atan2(vec.y, dir.z) * Mathf.Rad2Deg;

		record.rotX = rotX;
		record.rotY = rotY;
	}
	void setBallAngleInfo(HitRecord record){
		setAngleInfo("LaunchAngleValue", null, record.rotX);

		string prefix = null;
		float rotY = record.rotY;
		if (rotY < 0)
		{
			rotY = -rotY;
			prefix = "L";
		}
		else if (rotY > 0)
		{
			prefix = "R";
		}
		setAngleInfo("LRAngleValue", prefix, rotY);
	}
	void clearInfo(string tag){
		GameObject objInfo = m_objInfo1.transform.Find(tag).gameObject;
		GameObject objText = objInfo.transform.Find("text").gameObject;
		Text tx = objText.GetComponent<Text>();
		tx.text = "";
	}
	void setDistanceInfo1(string tag,float distance){
		GameObject objInfo = m_objInfo1.transform.Find(tag).gameObject;
		GameObject objText = objInfo.transform.Find("text").gameObject;
		Text tx = objText.GetComponent<Text>();
		tx.text = distance.ToString("f2") + "m";
	}
	void setDistanceInfo2(string tag,string prefix,float distance){
		GameObject objInfo = m_objInfo1.transform.Find(tag).gameObject;
		GameObject objText = objInfo.transform.Find("text").gameObject;
		Text tx = objText.GetComponent<Text>();
		tx.text = prefix + distance.ToString("f1") + "m";
	}
	void setSpeedInfo(string tag,float speed){
		GameObject objInfo = m_objInfo1.transform.Find(tag).gameObject;
		GameObject objText = objInfo.transform.Find("text").gameObject;
		Text tx = objText.GetComponent<Text>();
		tx.text = (int)speed + "km/h";
	}
	void setAngleInfo(string tag,string prefix,float angle){
		GameObject objInfo = m_objInfo1.transform.Find(tag).gameObject;
		GameObject objText = objInfo.transform.Find("text").gameObject;
		Text tx = objText.GetComponent<Text>();
		tx.text = prefix + angle.ToString("f1") + "°";
	}
	void setProgress(int progress){
		GameObject objGage = m_objProgress.transform.Find("gage").gameObject;

		UnityEngine.UI.Image image = objGage.GetComponent<UnityEngine.UI.Image>();
		float ratio = (float)progress * 0.01f;
		image.fillAmount = ratio;

		GameObject objValue = m_objProgress.transform.Find("value").gameObject;
		Text tx = objValue.GetComponent<Text>();
		tx.text = progress.ToString();
	}
	void showProgress(bool bShow){
		if( bShow != m_bShowProgress ){
			m_bShowProgress = bShow;
			m_objProgress.SetActive(bShow);
		}
	}
	GameObject addSysInfo(string name){
		name += "Info";
		GameObject obj = m_objMainCanvas.transform.Find(name).gameObject;
		GameObject objValue = obj.transform.Find("value").gameObject;
		return objValue;
	}
	void setSysInfo(GameObject obj,string value){
		obj.GetComponent<Text>().text = value;
	}
	void updateTrigger(){
		PVAT_setSysInt( "Trigger", m_bTrigger? 1: 0 );
		//setSysInfo(m_objTrigger, m_bTrigger? "on": "off");
	}
	void resetView(){
		//transform.localPosition = new Vector3(0, 1.35f, 0);
		transform.position = new Vector3(0, 1.35f, -3.5f);
		transform.eulerAngles = new Vector3(0, 0, 0);
		//m_objCanvas2.SetActive( true );
	}

	public GameObject prefabBallHit;
	public GameObject prefabBallEffect;
	public GameObject prefabGage;
	public GameObject prefabProgress;
	public GameObject prefabHitRecord;
	public GameObject prefabHitInfo;
	public GameObject prefabSpeedNormal;
	public GameObject prefabSpeedSilver;
	public GameObject prefabSpeedGold;
	public GameObject prefabDistanceNormal;
	public GameObject prefabDistanceSilver;
	public GameObject prefabDistanceGold;
	public GameObject prefabSignal;
	public GameObject prefabSysInfo;
	//public GameObject prefabSysToggle;
	public Sprite[] prefabSprite;
	//public Text prefabSpeed;
	//public Text prefabDistance;
	//public Text prefabStatus;

	private GameObject[] m_objHitRecord;

	private const int GamePhase_Wait        = 0;
	private const int GamePhase_Busy        = 1;
	private const int GamePhase_Start       = 2;
	private const int GamePhase_Hit         = 3;
	private const int GamePhase_HitGround   = 4;

	private const int SensorPhase_Busy      = 0;
	private const int SensorPhase_Ready     = 1;
	private const int SensorPhase_Start     = 2;

	private const int PVATResult_OK             = 0;
	private const int PVATResult_Uninitialize   = -1;
	private const int PVATResult_NotConnect     = -2;
	private const int PVATResult_DongleNotFound = -5;
	private const int PVATResult_NoFPS          = -6;
	private const int PVATResult_NoData         = -7;
	private const int PVATResult_Unknown        = -100;
	private const int PVATFlg_Hit               = 0x02;

	private const int NumHitRecord = 10;

	private const float KPH2MPS = (1000.0f / 3600.0f);
	private const float MPS2KPH = (3600.0f / 1000.0f);

	private const float RAD2DEG = (180.0f / Mathf.PI);
	private const float DEG2RAD = (Mathf.PI / 180.0f);

	//private const float ReadyTime = 4.0f;
	private const float ReadyTime = 5.0f;
	private const float WaitTime = 0.0f;
	private const float MainSpeedLife = 3;
	private const float MainSpeedScale = 1.2f;
	private const float HitGroundTime = 2.0f;
	//private const float HitInfoTime = 3.0f;
	private const float HitInfoTime = 2.5f;
	//private const float HitRecordPosX = 10.0f;
	private const float HitRecordPosX = 0;
	//private const float HitRecordPosY = -410.0f;
	private const float HitRecordPosY = -145;
	//private const float HitRecordHeight = 36.0f;
	//private const float HitRecordHeight = 24.0f;
	private const float HitRecordHeight = 48.0f;
	private const float SysInfoHeight = 25.0f;

	private PVATDetectInfo m_detect = new PVATDetectInfo();
	private GameObject m_objMainCanvas;
	private GameObject m_objInfo1;
	private GameObject m_objInfo2;
	private GameObject m_objDistanceInfo;
	private GameObject m_objSpeedInfo;
	//private GameObject m_objCanvas2;
	//private GameObject m_objKioskCanvas;
	private GameObject m_objGage = null;
	private GameObject m_objProgress = null;
	private GameObject m_objSignal = null;
	private GameObject m_objPhase = null;
	//private GameObject m_objCamSts = null;
	//private GameObject m_objFPS = null;
	//private GameObject m_objTrigger = null;
	private GameObject m_objRecIndex = null;
	private HitBall m_lastHit = null;
	private Camera m_objCamera = null;
	private SmoothFollow m_smoothFollow = null;
	private TrailView m_topView = null;
	private TrailView m_sideView = null;

	private PVAVector3D m_pos0, m_pos1;
	private Vector3 m_dir = new Vector3();
	private List<Vector3> m_posArray = new List<Vector3>();
	private List<HitRecord> m_RecordArray = new List<HitRecord>();
	private List<HitBall> m_HitArray = new List<HitBall>();
	private List<HitInfo> m_InfoArray = new List<HitInfo>();

	private bool m_bPVAT = false;
	private bool m_bStart = false;
	private bool m_bTrigger = false;
	private bool m_bStartReq = false;
	private bool m_bShowGage = false;
	private bool m_bShowProgress = false;
	private bool m_bFollow = true;
	private int m_nGamePhase;
	private int m_nSensorPhase;
	private int m_status = PVATResult_Uninitialize;
	private int m_nFPS = -1;
	private float m_dTime = 0;
	private float m_posSysInfo = 0;
}
